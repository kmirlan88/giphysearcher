{"version":3,"sources":["Giphy.js","App.js","serviceWorker.js","index.js"],"names":["Giphy","props","searchChangeHandler","event","performSearch","target","value","state","rows","searchTerm","url","fetch","then","data","json","response","movies","movieRows","forEach","movie","movieRow","key","id","style","display","paddingTop","paddingLeft","alt","src","images","downsized_large","width","height","backgroundColor","color","fontSize","fontWeight","title","push","setState","catch","error","console","onChange","this","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6OAqDeA,E,YAlDd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAMPC,oBAAsB,SAAAC,GACrB,EAAKC,cAAcD,EAAME,OAAOC,QANhC,EAAKC,MAAQ,CACZC,KAAM,IAHW,E,2EAWLC,GAAa,IAAD,OACnBC,EAAG,0FAAsFD,EAAtF,sCACTE,MAAMD,GACJE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACL,IAAIC,EAASD,EAASF,KAClBI,EAAY,GAChBD,EAAOE,SAAQ,SAAAC,GACd,IAAMC,EACL,yBAAKC,IAAKF,EAAMG,GAAIC,MAAO,CAACC,QAAS,eAAgBC,WAAY,OAAQC,YAAa,SACrF,yBAAKC,IAAI,SAASC,IAAKT,EAAMU,OAAOC,gBAAgBpB,IAAKa,MAAO,CAACQ,MAAO,QAASC,OAAQ,WACpE,uBAAGT,MAAO,CAACU,gBAAiB,MAAOC,MAAO,SAAUC,SAAU,OAAQC,WAAY,SAAUjB,EAAMkB,QAGzHpB,EAAUqB,KAAKlB,MAEhB,EAAKmB,SAAS,CAAE/B,KAAMS,OAEtBuB,OAAM,SAAAC,GACNC,QAAQD,MAAM,4BAA6BA,Q,+BAK7C,OACC,6BACC,wBAAIlB,MAAO,CAACW,MAAO,UAAnB,gBACA,2BACCZ,GAAG,aACYqB,SAAUC,KAAK1C,oBACfqB,MAAO,CAACQ,MAAO,QAASC,OAAQ,OAAQC,gBAAiB,MAAOC,MAAO,SAAUC,SAAU,OAAQC,WAAY,UAEnH,6BACXQ,KAAKrC,MAAMC,U,GA7CIqC,aCULC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqB,a","file":"static/js/main.e3b54085.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Giphy extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trows: []\n\t\t};\n\t}\n\n\tsearchChangeHandler = event => {\n\t\tthis.performSearch(event.target.value);\n\t};\n\n\tperformSearch(searchTerm) {\n\t\tconst url = `https://api.giphy.com/v1/gifs/search?api_key=8t37PiSdO3jpby2k4PRtimDMi7Z1kiqD&q=${searchTerm}&limit=6&offset=0&rating=G&lang=en`;\n\t\tfetch(url)\n\t\t\t.then(data => data.json())\n\t\t\t.then(response => {\n\t\t\t\tlet movies = response.data;\n\t\t\t\tvar movieRows = [];\n\t\t\t\tmovies.forEach(movie => {\n\t\t\t\t\tconst movieRow = (\n\t\t\t\t\t\t<div key={movie.id} style={{display: \"inline-block\", paddingTop: \"40px\", paddingLeft: \"20px\"}}>\n\t\t\t\t\t\t\t<img alt=\"poster\" src={movie.images.downsized_large.url} style={{width: \"500px\", height: \"300px\"}}></img>\n                            <p style={{backgroundColor: \"red\", color: \"yellow\", fontSize: \"30px\", fontWeight: \"bold\"}}>{movie.title}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t\tmovieRows.push(movieRow);\n\t\t\t\t});\n\t\t\t\tthis.setState({ rows: movieRows });\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(\"Error coming from API:   \", error);\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 style={{color: \"green\"}}>Giphy Search</h1>\n\t\t\t\t<input\n\t\t\t\t\tid=\"inputField\"\n                    onChange={this.searchChangeHandler}\n                    style={{width: \"250px\", height: \"30px\", backgroundColor: \"red\", color: \"yellow\", fontSize: \"30px\", fontWeight: \"bold\"}}\n\t\t\t\t\t></input>\n                <br></br>\n\t\t\t\t{this.state.rows}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Giphy;\n","import React from 'react';\nimport './App.css';\nimport Giphy from './Giphy';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Giphy />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}